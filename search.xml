<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>添加 Gitalk 评论区</title>
      <link href="blog/AddComment/"/>
      <url>blog/AddComment/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="添加-Gitalk-评论功能"><a href="#添加-Gitalk-评论功能" class="headerlink" title="添加 Gitalk 评论功能"></a>添加 Gitalk 评论功能</h1><hr><h2 id="获取-Gitalk的id和secret"><a href="#获取-Gitalk的id和secret" class="headerlink" title="获取 Gitalk的id和secret"></a>获取 Gitalk的<code>id</code>和<code>secret</code></h2><p>在 Github 仓库主页点击右上角头像，选择<code>setting</code> —&gt; <code>Developer settings</code>—&gt; <code>OAuth Apps</code>，然后点击<code>Register a new application</code>选项卡，新建一个授权APP设置项。</p><div class="note warning modern"><p>注意这里如果没有域名，就跟你主页保持一致。</p></div><p><img src="\blog\AddComment\OAuthApp.png" alt="OAuth App" style="zoom:80%;" /></p><div class="note success modern"><p>获取<code>Client ID</code>和<code>Client secrets</code>（这里我把自己的信息打码了）</p></div><p><img src="\blog\AddComment\ID&Secrets.png" alt="ID & Secrets" style="zoom:70%;" /></p><hr><h2 id="修改-config-butterfly-yml配置"><a href="#修改-config-butterfly-yml配置" class="headerlink" title="修改_config.butterfly.yml配置"></a>修改<code>_config.butterfly.yml</code>配置</h2><h3 id="修改comments和gitalk栏目"><a href="#修改comments和gitalk栏目" class="headerlink" title="修改comments和gitalk栏目"></a>修改<code>comments</code>和<code>gitalk</code>栏目</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># 在use下设置使用的评论系统，不设置则不启用。最多只能设置两个评论系统，第一个设为默认</span></span><br><span class="line">  <span class="attr">use:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">Gitalk</span> <span class="comment"># 注意G大写</span></span><br><span class="line">  <span class="comment"># - Valine</span></span><br><span class="line">  <span class="comment"># - Disqus</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># 在按钮旁边显示评论名称</span></span><br><span class="line">  <span class="comment"># lazyload: 当评论元素进入浏览器的视口时，评论系统将被加载。</span></span><br><span class="line">  <span class="comment"># 如果设置为true，则评论计数无效</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># 在帖子的 top_img 中显示评论数</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># 在主页中显示评论数</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># gitalk</span></span><br><span class="line"><span class="comment"># https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">Your</span> <span class="string">Client</span> <span class="string">ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">Your</span> <span class="string">Client</span> <span class="string">secret</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">loli-eternally.github.io</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">Loli-Eternally</span></span><br></pre></td></tr></table></figure><h3 id="重新线上部署"><a href="#重新线上部署" class="headerlink" title="重新线上部署"></a>重新线上部署</h3><div class="note success modern"><p>评论区部署和博客的线上部署步骤一样，已经整理成傻瓜式<a href="/blog/done/#上传博客">点击</a>就送啦！</p></div><hr><h2 id="查看部署并授权"><a href="#查看部署并授权" class="headerlink" title="查看部署并授权"></a>查看部署并授权</h2><div class="note warning modern"><p>第一次会显示未找到相关的 Issue 进行评论，需要用自己的仓库的 GitHub 账号登录并授权。</p></div><p><img src="\blog\AddComment\IssueNotfound.png" alt="Issue Not Found" style="zoom:60%;" /></p><p>授权好之后，会在 GitHub 主页的 Issue 栏目下看到新的 Issue 评论。</p><p><img src="\blog\AddComment\Issue.png" alt="Issue" style="zoom:80%;" /></p><div class="note success modern"><p>回到博客，发现 Gitalk 评论区已成功加载。</p></div><p><img src="\blog\AddComment\Comment.png" alt="Comment" style="zoom:60%;" /></p><div class="note warning modern"><p>注意，浏览器的 Grammarly 插件会导致评论输入每次只能打一个字母，输入评论前先禁用该插件。</p></div>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改 Gitalk 评论区字体样式</title>
      <link href="blog/CommentFont/"/>
      <url>blog/CommentFont/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定制博客-Gitalk-评论区的字体"><a href="#定制博客-Gitalk-评论区的字体" class="headerlink" title="定制博客 Gitalk 评论区的字体"></a>定制博客 Gitalk 评论区的字体</h1><hr><h2 id="重定向-gitalk-min-css"><a href="#重定向-gitalk-min-css" class="headerlink" title="重定向 gitalk.min.css"></a>重定向 gitalk.min.css</h2><div class="note info modern"><p>Gitalk 的样式可以在<code>_config.butterfly.yml</code>中的<code>comment</code>区找到。</p></div><p>Gitalk 的<code>css</code>文件默认定向为<code>https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css</code>，我们将其重定向为自己新建的<code>/css/gitalk.min.css</code>。</p><p><img src="\blog\CommentFont\FontRef.png" alt="Font Ref" style="zoom:80%;" /></p><hr><h2 id="新建-gitalk-min-css"><a href="#新建-gitalk-min-css" class="headerlink" title="新建 gitalk.min.css"></a>新建 gitalk.min.css</h2><div class="note info modern"><p>在<code>theme/butterfly/source/css</code>中新建一个<code>gitalk.min.css</code>文件，然后在本地部署的网页中打开<code>DevTools</code>工具(F12)，找到<code>gitalk.min.css</code>并将其中内容复制到前者中。</p></div><p><img src="\blog\CommentFont\DevTools.png" alt="Dev Tools" style="zoom:80%;" /></p><hr><h2 id="修改-font-family"><a href="#修改-font-family" class="headerlink" title="修改 font-family"></a>修改 font-family</h2><p>在复制好的<code>gitalk.min.css</code>中对<code>font-family</code>进行修改，这样评论区的样式就由重定向后的结果决定。</p><p><img src="\blog\CommentFont\FontChange.png" alt="Font Change" style="zoom:80%;" /></p><hr><h2 id="查看评论区结果"><a href="#查看评论区结果" class="headerlink" title="查看评论区结果"></a>查看评论区结果</h2><p>修改前：</p><p><img src="\blog\CommentFont\BeforeChange.png" alt="Before Change"></p><p>修改后：</p><p><img src="\blog\CommentFont\AfterChange.png" alt="After Change"></p><div class="note success modern"><p>评论区字体修正成功！</p></div>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加一篇 blog 文章</title>
      <link href="blog/WriteBlog/"/>
      <url>blog/WriteBlog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="小白如何添加自己的第一篇-blog"><a href="#小白如何添加自己的第一篇-blog" class="headerlink" title="小白如何添加自己的第一篇 blog"></a>小白如何添加自己的第一篇 blog</h1><hr><h2 id="页面生成"><a href="#页面生成" class="headerlink" title="页面生成"></a>页面生成</h2><p>点击<code>创建文章或页面.bat</code>文件，选择1。</p><p><img src="\blog\WriteBlog\BuildPage.png" width="60%"></p><p><img src="\blog\WriteBlog\BuildPage1.png" alt="Build Page" width="60%"></p><div class="note info modern"><p>可以看到<code>source\_posts</code>里多了一个文件夹和一个md文件，这里就是咱们需要修改的地方。</p></div><p><img src="\blog\WriteBlog\NewBlog.png" alt="New Blog" style="zoom:67%;" /></p><hr><h2 id="编辑页面"><a href="#编辑页面" class="headerlink" title="编辑页面"></a>编辑页面</h2><p>打开md文件， 这里需要用<code>markdown</code>语法写笔记。</p><div class="note success modern"><p>目前主流的<code>markdown</code>编辑器有很多，知乎上已经介绍地非常详细了<a href="https://zhuanlan.zhihu.com/p/69210764"><strong>Link</strong></a>，不过本人还是喜欢用<code>Typora</code>，简洁干净轻量，还有各式各样好看的主题可供选择。</p></div><blockquote><p>[!Note]</p><ul><li>This is my first blog!<ul><li>Hello World!</li><li>[x] Good Job!</li></ul></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jueye ~]<span class="comment"># echo Hello Typora!</span></span><br><span class="line">Hello Typora!</span><br></pre></td></tr></table></figure><p>以本节上方内容为例，<code>Typora</code>里输出的样式如下图所示。</p><p><img src="\blog\WriteBlog\DemoBlog.png" alt="Demo Blog" style="zoom:60%;" /></p><div class="note info modern"><p>针对<code>Markdown</code>语法，后面会出一期专栏进行详解，有兴趣的小伙伴可以多多关注萌雪哦！</p></div><hr><h2 id="页面部署"><a href="#页面部署" class="headerlink" title="页面部署"></a>页面部署</h2><div class="note success modern"><p>页面部署和博客的线上部署步骤一样，已经整理成傻瓜式<a href="/blog/done/#上传博客">点击</a>就送啦！</p></div><div class="note info modern"><p>值得注意的是，md文件内容与本地部署的测试页面是同步更新的，这意味着大家可以在本地边写Blog边刷新网页看成果，简直太欢愉了！</p></div>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 搭建个人博客随记</title>
      <link href="blog/done/"/>
      <url>blog/done/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo-Butterfly-搭建个人博客随记"><a href="#Hexo-Butterfly-搭建个人博客随记" class="headerlink" title="Hexo + Butterfly 搭建个人博客随记"></a>Hexo + Butterfly 搭建个人博客随记</h1><hr><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><div class="note warning modern"><p>首先得有一个GitHub账号</p></div><p><img src="\blog\done\SigninGithub.png" alt="Sign in GitHub" width="70%"> </p><div class="note info modern"><p>这里就不赘述如何注册一个GitHub账号了，如果大家能够科学上网想必能轻松完成。</p></div><p>打开你的repo，new一个名字叫<code>YourName.github.io</code>的repo。这里我演示的名字叫<code>BlogDemo</code>，大家也可以挑自己喜欢的。</p><p><img src="\blog\done\YourRepo.png" alt="Your Repo" style="zoom:80%;" /></p><p><img src="\blog\done\NewRepo.png" alt="New Repo" style="zoom:80%;" /></p><div class="note warning modern"><p>注意这里可以下载安装<code>GitHub Desktop</code>，便于不想学<code>git</code>指令的小伙伴管理仓库。此外，需要将<code>HTTPS</code>和<code>SSH</code>对应的网址<code>https://github.com/Loli-Eternally/BlogDemo.github.io.git</code>和地址<code>git@github.com:Loli-Eternally/BlogDemo.github.io.git</code>记录下来，便于后面修改配置进行博客的部署。</p></div><p><img src="\blog\done\BlogDemo.png" alt="Blog Demo"></p><p>下载安装好<code>GitHub Desktop</code>并启动后，clone<code>BlogDemo</code>，URL地址为上面提到的<code>https://github.com/Loli-Eternally/BlogDemo.github.io.git</code></p><p><img src="\blog\done\GD.png" alt="GitHub Desktop"></p><p><img src="\blog\done\GitClone.png" alt="Git Clone"></p><p>这个时候我们的repo是空的，需要在本地将<code>BlogDemo</code>进行部署。可以直接将我准备好的<a href="https://pan.baidu.com/s/18bdxJlWn1yhRBNv-Q51Rsg?pwd=32gs">Demo镜像</a>下载下来，解压到上面Git Clone图里的<code>Local path</code>下</p><p><img src="\blog\done\Unzip.png" alt="Unzip" style="zoom:80%;" /></p><p>现在需要安装<strong>hexo</strong>了，但是这个框架需要用到Nodejs，这个请大家自行安装。</p><div class="note warning modern"><p>大家安装Nodejs时注意添加环境变量，后面安装<strong>hexo</strong>需要调用<code>npm</code>。</p></div><p>打开Unzip图中最下方的<code>运行脚本.bat</code>，选择1用npm安装hexo（如果太慢可以尝试别的选项）。</p><p><img src="\blog\done\npminstall.png" alt="npm install"></p><p>这里我们可以看到多了个<code>node_modules</code>文件夹，点进去进入<code>.bin</code>目录，<code>ctrl+c</code>复制这个路径。</p><p><img src="\blog\done\NodeModule.png" alt="NodeModule"></p><p><img src="\blog\done\path.png" alt="Path"></p><div class="note info modern"><p>添加环境变量，在这个路径下可以直接从<code>cmd</code>启动<strong>hexo</strong>。</p></div><p><img src="\blog\done\Env.png" alt="Env Config"></p><p>再次打开<code>运行脚本.bat</code>，选择<code>2. 本地运行测试</code>（需要等一小会儿）</p><p><img src="\blog\done\LocalTest.png" alt="Local Test"></p><div class="note success modern"><p>本地测试部署成功</p></div><p><img src="\blog\done\Congrats.png" alt="Congratulations"></p><h2 id="线上部署"><a href="#线上部署" class="headerlink" title="线上部署"></a>线上部署</h2><p>点击<code>设置git用户名和生成密钥.bat</code>，输入的名字和邮箱后回车。是否覆盖选y，回车一直到底，成功生成ssh密钥。</p><p><img src="\blog\done\SSH.png" alt="SSH"></p><p><img src="\blog\done\SSHKey.png" alt="SSH Key"></p><p>打开<code>生成的ssh密钥.txt</code>，<code>ctrl+c</code>复制密钥。</p><p><img src="\blog\done\SSHKeyC.png" alt="SSH Key Copy"></p><p>回到GitHub仓库，点击<code>Setting</code>选项卡下的<code>Deploy keys</code>，添加一个key并将复制好的密钥粘贴进去。</p><p><img src="\blog\done\Setting.png" alt="Setting"></p><p>SSH key添加好后，打开<code>_config.yml</code>文件，修改<code>url</code>和<code>repo</code>，替换成你自己的https网址和git地址。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://github.com/Loli-Eternally/BlogDemo.github.io.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment 部署</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:Loli-Eternally/BlogDemo.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">upload</span></span><br></pre></td></tr></table></figure><h3 id="上传博客"><a href="#上传博客" class="headerlink" title="上传博客"></a>上传博客</h3><p>关闭本地部署的blog网页和cmd，重新启动<code>运行脚本.bat</code>，选择<code>3. 上传网站</code>。</p><div class="note success modern"><p>回到repo主页，看到此时的repo已经都上传好了。</p></div><p><img src="\blog\done\DeployRepo.png" alt="Deploy Repo"></p><p>点击<code>Setting</code>选项卡下的<code>Pages</code>，在<code>Branch</code>一栏选择<code>master</code>并保存。</p><p><img src="\blog\done\Check.png" alt="Check Blog"></p><div class="note success modern"><p>等几分钟后，GitHub完成部署，就可以<code>Visit site</code>了。</p></div><p><img src="\blog\done\DeploySucceed.png" alt="Deploy Succeed"></p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
