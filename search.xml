<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Zemax 坐标间断</title>
      <link href="blog/CoordinateBreaks/"/>
      <url>blog/CoordinateBreaks/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="序列成像坐标断点"><a href="#序列成像坐标断点" class="headerlink" title="序列成像坐标断点"></a>序列成像坐标断点</h2><h3 id="坐标断点"><a href="#坐标断点" class="headerlink" title="坐标断点"></a>坐标断点</h3><p>坐标断点有七个自由度：</p><ul><li>X, Y方向的偏心</li><li>X, Y, Z方向的倾斜</li><li>厚度（Z方向的偏心）</li><li>倾斜/偏心顺序</li></ul><h3 id="设置坐标断点"><a href="#设置坐标断点" class="headerlink" title="设置坐标断点"></a>设置坐标断点</h3><blockquote><p>文件→Samples→Sequential→Objectives</p><p>选择库克三面镜</p><p>目标是想要让第三面透镜偏心或倾斜</p></blockquote><p><strong>操作步骤：</strong></p><ol><li>将2D布局图换成3D布局图，因为偏心和倾斜需要在X, Y, Z三个方向上体现。</li><li>取消所有的变量（优化→自动优化→移除所有变量）。</li><li>在第三面透镜的两个表面前后，各插入一个坐标断点面。</li><li>设置这两个表面的类型为坐标间断。</li><li>通过修改后面的偏心和倾斜参数实现第三面透镜的偏心和倾斜。</li></ol><p><strong>注意事项：</strong></p><ul><li>添加坐标间断，<strong>本质是添加一个局部坐标轴</strong>。在该间断后，以这个局部坐标轴为基准点进行参数设定。</li><li>之所以在第三面透镜后再添加一个坐标间断，是为了<strong>将局部坐标轴恢复为整个系统的原光轴</strong>。</li><li>局部坐标轴上的操作，遵循<strong>先偏心，后倾斜</strong>，因此第二个坐标间断处的操作先在倾斜的坐标轴上进行偏心，而后倾斜回来，就无法让坐标轴恢复到原系统的光轴上。</li></ul><h3 id="镜头数据"><a href="#镜头数据" class="headerlink" title="镜头数据"></a>镜头数据</h3><p>偏心情况下第二个坐标断点直接拾取前一个坐标断点的数据并做-1缩放，即可恢复原光轴。</p><p>倾斜情况下（无偏心），第二坐标断点需要调整至前一个坐标断点处，再做偏移，方能恢复原光轴。</p><p><img src="\blog\CoordinateBreaks\LensData.png" alt="Lens Data" style="zoom:67%;" /></p><p>观察到顶点数据回归到0。</p><p><img src="\blog\CoordinateBreaks\PrescriptionData.png?lastModify=1719216333" alt="Prescription Data" style="zoom:67%;" /></p><h3 id="观察局部坐标轴变化"><a href="#观察局部坐标轴变化" class="headerlink" title="观察局部坐标轴变化"></a>观察局部坐标轴变化</h3><p><img src="\blog\CoordinateBreaks\LocalCoordiante.png?lastModify=1719216613" alt="Local Coordinate" style="zoom:67%;" /></p><p><img src="\blog\CoordinateBreaks\ChangeCoordinate.png?lastModify=1719216704" alt="Coordinate Changing" style="zoom:67%;" /></p>]]></content>
      
      
      <categories>
          
          <category> Zemax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zemax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zemax 激光扩束系统优化设计</title>
      <link href="blog/Expander/"/>
      <url>blog/Expander/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="激光扩束系统优化设计"><a href="#激光扩束系统优化设计" class="headerlink" title="激光扩束系统优化设计"></a>激光扩束系统优化设计</h1><hr><h2 id="设置系统入瞳"><a href="#设置系统入瞳" class="headerlink" title="设置系统入瞳"></a>设置系统入瞳</h2><p>入瞳5 mm，无焦像空间，净口径余量1 mm。</p><p><img src="\blog\Expander/EntrancePupil.png" alt="Entrance Pupil" style="zoom: 67%;" /></p><h2 id="设置视场"><a href="#设置视场" class="headerlink" title="设置视场"></a>设置视场</h2><p>扩束镜只有沿轴方向的一个视场，所以用默认轴上视场无需改动。</p><h2 id="设置波长"><a href="#设置波长" class="headerlink" title="设置波长"></a>设置波长</h2><p>选用HeNe激光器的波长0.6328 $\mu m$</p><p><img src="\blog\Expander\Wavelength.png" alt="Wavelength" style="zoom: 67%;" /></p><h2 id="设置镜头数据"><a href="#设置镜头数据" class="headerlink" title="设置镜头数据"></a>设置镜头数据</h2><p><img src="\blog\Expander\LensData.png" alt="Lens Data" style="zoom: 67%;" /></p><h2 id="查看初始结构波前差"><a href="#查看初始结构波前差" class="headerlink" title="查看初始结构波前差"></a>查看初始结构波前差</h2><p>分析→波前图→波前图</p><p>设置→显示为→伪彩色</p><p><img src="\blog\Expander\WaveFront.png" alt="Wave Front" style="zoom: 67%;" /></p><h2 id="设置优化变量"><a href="#设置优化变量" class="headerlink" title="设置优化变量"></a>设置优化变量</h2><p><img src="\blog\Expander\Variables.png" alt="Variables Setting" style="zoom: 67%;" /></p><h2 id="设置评价函数"><a href="#设置评价函数" class="headerlink" title="设置评价函数"></a>设置评价函数</h2><p><img src="\blog\Expander\MFE.png" alt="MFE Setting" style="zoom: 67%;" /></p><p>限制镜头总长和边缘光线与光轴的距离。</p><p><img src="\blog\Expander\Limit.png" alt="Limit Setting" style="zoom: 67%;" /></p><ul><li>TTHI：面一到面二的总厚度，包括该两个面的厚度。</li><li>OPLT：操作数小于指定的值</li><li>REAY：指定光线追迹到指定面处的Y坐标（Hx、Hy代表归一化视场坐标，视场角度。Px、Py代表归一化光瞳坐标，光瞳位置）</li></ul><p>将REAY的目标值设定为入瞳五倍的一半，即12.5，然后优化。</p><h2 id="查看结果是否满足需求"><a href="#查看结果是否满足需求" class="headerlink" title="查看结果是否满足需求"></a>查看结果是否满足需求</h2><p>将镜片2前表面设定为无限并取消变量设定，再次优化，查看PTV值为0.08个波长，符合要求。</p><p><img src="\blog\Expander\WaveFrontRes.png" alt="Wave Front" style="zoom: 67%;" /></p><h2 id="查看面数据"><a href="#查看面数据" class="headerlink" title="查看面数据"></a>查看面数据</h2><p>分析→报告→表面数据报告</p><p>设置→表面→2 镜片1</p><p><img src="\blog\Expander\SurfaceData.png" alt="Surface Data" style="zoom: 67%;" /></p><h2 id="查询镜头库找到现成透镜产品进行替换"><a href="#查询镜头库找到现成透镜产品进行替换" class="headerlink" title="查询镜头库找到现成透镜产品进行替换"></a>查询镜头库找到现成透镜产品进行替换</h2><p>输入得到的面数据，给定范围进行查找。</p><p><img src="\blog\Expander\LensLibrary.png" alt="Lens1 Library" style="zoom: 67%;" /></p><h2 id="插入透镜重新优化"><a href="#插入透镜重新优化" class="headerlink" title="插入透镜重新优化"></a>插入透镜重新优化</h2><p>将厚度复制到插入透镜的后表面，删除镜片1，重新优化。</p><p>同样的道理更换第二只镜片，删除镜片2，重新优化。</p><p><img src="\blog\Expander\LensLibrary1.png" alt="Lens2 Library" style="zoom: 67%;" /></p><p><img src="\blog\Expander\LensDataFinal.png" alt="Lens Data Final.png" style="zoom: 67%;" /></p><p>发现PTV的值很大，将镜片2进行翻转，并在MFE中将OPLT设置到255，重新优化。</p><p><img src="\blog\Expander\FinalRes.png" alt="Final Result.png" style="zoom: 67%;" /></p><p>满足要求，设计结束。</p>]]></content>
      
      
      <categories>
          
          <category> Zemax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zemax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zemax 热分析</title>
      <link href="blog/ZemaxThermalAnalyse/"/>
      <url>blog/ZemaxThermalAnalyse/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Zemax-光学系统热效应分析"><a href="#Zemax-光学系统热效应分析" class="headerlink" title="Zemax 光学系统热效应分析"></a>Zemax 光学系统热效应分析</h1><hr><h2 id="Zemax-热分析"><a href="#Zemax-热分析" class="headerlink" title="Zemax 热分析"></a>Zemax 热分析</h2><ul><li>光学系统结构会随环境温度变化而变化<ul><li>光学材料折射率</li><li>空气折射率</li><li>光学材料热胀冷缩</li><li>机械结构热胀冷缩</li></ul></li><li>环境压强变化<ul><li>材料折射率变化</li></ul></li></ul><h3 id="设置镜头数据"><a href="#设置镜头数据" class="headerlink" title="设置镜头数据"></a>设置镜头数据</h3><p><img src="\blog\ZemaxThermalAnalyse\ThermalLensData.png?lastModify=1718873646" alt="Lens Data"></p><h3 id="设置-FdC-波长和环境参数"><a href="#设置-FdC-波长和环境参数" class="headerlink" title="设置 FdC 波长和环境参数"></a>设置 FdC 波长和环境参数</h3><p><img src="\blog\ZemaxThermalAnalyse\FdC&Env.png?lastModify=1718873646" alt="FdC & Env" style="zoom: 67%;" /></p><h3 id="设置热分析多重结构"><a href="#设置热分析多重结构" class="headerlink" title="设置热分析多重结构"></a>设置热分析多重结构</h3><p><img src="\blog\ZemaxThermalAnalyse\ThermalConfig.png?lastModify=1718873646" alt="Thermal Config" style="zoom: 67%;" /></p><p>多重结构编辑器给出了四个结构，第一个是标准环境下（20 ℃ &amp; 1 atm）的情况。</p><p><img src="\blog\ZemaxThermalAnalyse\ThermalMCE.png?lastModify=1718873646" alt="Thremal MCE" style="zoom: 67%;" /></p><p>对于机械结构，第三个面的厚度由外部机械结构决定，所以在镜头数据编辑器第三个面最后的TCE选框中输入机械结构的TCE值（Thermal Coefficient of Expansion，23.6）。</p><p>打开点列图，利用<code>ctrl + A</code>切换不同温度下点列图，观察变化。 </p><div class="note info modern"><p>注意需要在多重结构编辑器中设置曲率变量，同时也要将后焦距设置为变量，最后再进行优化。</p></div><p>优化透镜材料时，将玻璃设置为替代。同时考虑到镜片的TCE差值需要被限制在一定范围内避免透镜开裂，需要在MFE中添加几个操作数用以限制，之后再进行锤形优化。</p><p><img src="\blog\ZemaxThermalAnalyse\MFETCE.png?lastModify=1718873646" alt="MFE TCE" style="zoom: 67%;" /></p><p>分析—&gt;光线追迹—&gt;结构矩阵点列图</p><p><img src="\blog\ZemaxThermalAnalyse\MCSpot.png" alt="MC Spot Diagram" style="zoom: 67%;" /></p>]]></content>
      
      
      <categories>
          
          <category> Zemax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zemax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zemax 多重结构</title>
      <link href="blog/ZemaxMultiConfig/"/>
      <url>blog/ZemaxMultiConfig/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="变焦镜头优化设计"><a href="#变焦镜头优化设计" class="headerlink" title="变焦镜头优化设计"></a>变焦镜头优化设计</h1><hr><h2 id="Zemax-多重结构"><a href="#Zemax-多重结构" class="headerlink" title="Zemax 多重结构"></a>Zemax 多重结构</h2><ul><li><strong>多重结构系统类型</strong><ul><li>变焦系统</li><li>消热差系统</li><li>多光路系统</li><li>扫描系统</li><li>可换组件系统</li></ul></li><li><strong>变焦系统设计</strong><ul><li>三个变焦位置，有效焦距75，100，125 mm</li><li>入瞳直径25 mm</li><li>3组，使用BK7/F2组合</li><li>最小中心、边缘厚度2 mm</li><li>最大中心厚度10 mm</li><li>近轴像高17 mm</li><li>F，d，C光</li></ul></li></ul><h2 id="设置镜头数据"><a href="#设置镜头数据" class="headerlink" title="设置镜头数据"></a>设置镜头数据</h2><p><img src="\blog\ZemaxMultiConfig\LensData.png?lastModify=1718865321" alt="Entrance Pupil"></p><h2 id="设置视场"><a href="#设置视场" class="headerlink" title="设置视场"></a>设置视场</h2><p><img src="\blog\ZemaxMultiConfig\FOV.png?lastModify=1718865321" alt="FOV" style="zoom:67%;" /></p><h2 id="多重结构编辑器"><a href="#多重结构编辑器" class="headerlink" title="多重结构编辑器"></a>多重结构编辑器</h2><p><img src="\blog\ZemaxMultiConfig\MCE.png?lastModify=1718865321" alt="MCE Setting" style="zoom: 67%;" /></p><p>用THIC操作数控制镜片的间距，得到多重变焦结构。</p><div class="note warning modern"><p>注意这里所有结构的参数都需要<code>ctrl + z</code>设置为变量</p></div><h2 id="评价函数编辑器"><a href="#评价函数编辑器" class="headerlink" title="评价函数编辑器"></a>评价函数编辑器</h2><p>在优化向导中设置边界厚度限制。</p><p><img src="\blog\ZemaxMultiConfig\MFE.png?lastModify=1718865321" alt="MFE Setting"></p><div class="note warning modern"><p>多重结构不能用最后一个面的曲率的F解控制F数，因为多重结构有多个F数，这时应该使用EFFL操作数。</p></div><p>添加CONF和EFFL操作数。</p><p><img src="\blog\ZemaxMultiConfig\MFE1.png?lastModify=1718865321" alt="MFE"></p><h2 id="在镜头数据中设置变量"><a href="#在镜头数据中设置变量" class="headerlink" title="在镜头数据中设置变量"></a>在镜头数据中设置变量</h2><p><img src="\blog\ZemaxMultiConfig\LE.png?lastModify=1718865321" alt="LE Setting"></p><h2 id="三维布局图设置"><a href="#三维布局图设置" class="headerlink" title="三维布局图设置"></a>三维布局图设置</h2><p><img src="\blog\ZemaxMultiConfig\3DL.png?lastModify=1718865321" alt="3D Layout Setting" style="zoom: 67%;" /></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>系统左对齐：设置系统孔径里的全局坐标参考面。</p><p>入射平行光线：在物面后加一个面，调整距离，属性—&gt;绘图，勾选不显示此表面。</p><p><img src="\blog\ZemaxMultiConfig\3DL1.png" alt="3D Layout" style="zoom: 67%;" /></p><div class="note success modern"><p>如果打开的是2D Layout，可以<code>ctrl + A</code>在不同结构下进行切换。</p></div>]]></content>
      
      
      <categories>
          
          <category> Zemax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zemax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加网页背景音乐</title>
      <link href="blog/AddMusic/"/>
      <url>blog/AddMusic/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="添加-Aplayer-背景音乐"><a href="#添加-Aplayer-背景音乐" class="headerlink" title="添加 Aplayer 背景音乐"></a>添加 Aplayer 背景音乐</h1><hr><h2 id="配置-config-butterfly-yml"><a href="#配置-config-butterfly-yml" class="headerlink" title="配置_config.butterfly.yml"></a>配置<code>_config.butterfly.yml</code></h2><p>打开根目录 下 的<code>_config.butterfly.yml</code>，查找关键字<code>aplayer</code>，修改两个栏目下的配置信息。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 背景音乐</span></span><br><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/font.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># Aplayer 音乐播放器配置：</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> </span><br><span class="line">      <span class="string">data-id=&quot;9723909579&quot;</span> </span><br><span class="line">      <span class="string">data-server=&quot;netease&quot;</span> </span><br><span class="line">      <span class="string">data-type=&quot;playlist&quot;</span> </span><br><span class="line">      <span class="string">data-fixed=&quot;true&quot;</span> </span><br><span class="line">      <span class="string">data-mini=&quot;true&quot;</span> </span><br><span class="line">      <span class="string">data-listFolded=&quot;false&quot;</span> </span><br><span class="line">      <span class="string">data-order=&quot;random&quot;</span> </span><br><span class="line">      <span class="string">data-preload=&quot;auto&quot;</span> </span><br><span class="line">      <span class="string">data-autoplay=&quot;true&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>这里将<code>aplayerInject</code> 的<code>enable</code>设为<code>true</code>，具体配置在<code>bottom</code>下修改。</p><div class="note info modern"><p>其中最重要的信息是<code>data-id</code>和<code>data-server</code>。<code>data-server</code>指的是音乐平台，有 netease （网易），tencent （腾讯），kugou （酷狗），xiami （虾米），baidu （百度）等。</p></div><h2 id="查询音乐-id"><a href="#查询音乐-id" class="headerlink" title="查询音乐 id"></a>查询音乐 id</h2><p>以网易云音乐为例，登录网页版音乐列表页面，<code>F12</code>打开 DevTools，搜索关键字<code>playlist</code>。</p><p><img src="\blog\AddMusic\AddMusic.png" alt="Search data-id"></p><p>找到<code>data-id</code>后的数字，将鼠标悬停在上面，查看左边网页元素是否对的上，确定该<code>id</code>为你想选取的背景歌单。</p><div class="note success modern"><p>将<code>data-id</code>和<code>data-server</code>配置好，刷新页面，就能看到自己博客的背景音乐播放器啦！</p></div>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 随记</title>
      <link href="blog/DockerLearning/"/>
      <url>blog/DockerLearning/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="docker-学习"><a href="#docker-学习" class="headerlink" title="docker 学习"></a>docker 学习</h1><ul><li><p>一个物理机可以通过VMware虚拟化安装多个操作系统</p><p>每个操作系统可以运行单独的app，一台物理机可以部署多个app</p></li><li><p>每个app独立运行在一个VM里</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加仓库，更新阿里云的源</span></span><br><span class="line"><span class="comment"># 基础仓库</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">额外仓库</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理yum缓存</span></span><br><span class="line">yum clean all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将软件包信息提前在本地索引缓存，生成新缓存</span></span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空现有规则</span></span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看SElinux状态是否为disable</span></span><br><span class="line">getenforce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装常用的工具</span></span><br><span class="line">yum install -y bash-completion vim lrzsz wget expect net-tools nc nmap tree dos2unix htop iftop iotop unzip telnet sl psmisc nethogs glances bc ntpdate openldap-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止防火墙开机自启</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关掉防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker运行平台必须是centOS7平台，内核版本不低于3.10</span></span><br><span class="line">查看uname -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启linux内核的流量转发</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF &gt; /etc/sysctl.d/docker.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.conf.default.rp_filter = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.rp_filter = 0</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载修改内核的参数，配置文件</span></span><br><span class="line">modprobe br_netfilter</span><br><span class="line">sysctl -p /etc/sysctl.d/docker.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用yum快速安装docker</span></span><br><span class="line"><span class="comment"># 提前配置好yum仓库</span></span><br><span class="line"><span class="comment"># 1. 阿里云自带仓库</span></span><br><span class="line"><span class="comment"># 2. 阿里云提供的专属repo仓库</span></span><br><span class="line"><span class="comment"># 下载阿里源repo文件</span></span><br><span class="line">curl -o /etc/yum.repos.d/Centos-7.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/docker-ce.repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum 安装</span></span><br><span class="line">yum install docker-ce-20.10.6 -y</span><br><span class="line"><span class="comment">## 查看源中可用版本</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="comment">## 如果需要安装旧版本</span></span><br><span class="line"><span class="comment">## yum install -y docker-ce-18.09.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要卸载</span></span><br><span class="line">yum remove -y docker-xx</span><br></pre></td></tr></table></figure><hr><h2 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h2><p>使用docker首要操作就是获取镜像文件，默认下载是从Docker Hub下载，网速慢，国内很多云服务商都提供了加速器服务，阿里云加速器，Daocloud加速器，灵雀云加速器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先创建一个docker文件夹和配置文件</span></span><br><span class="line">mkdir -p /etc/docker</span><br><span class="line">touch /etc/docker/daemon.json</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 粘贴以下内容</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>:[</span><br><span class="line">    <span class="string">&quot;https://8xpk5wnt.mirror.aliyuncs.com&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 查看docker版本</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><hr><h2 id="启动第一个docker容器"><a href="#启动第一个docker容器" class="headerlink" title="启动第一个docker容器"></a>启动第一个docker容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 获取镜像</span></span><br><span class="line">docker pull image_name</span><br><span class="line"><span class="comment"># 2. 运行镜像，生成容器，你想要的容器，就运行在容器中</span></span><br><span class="line">docker run param image_name/id</span><br><span class="line"><span class="comment"># 3. 停止容器</span></span><br><span class="line">docker stop id</span><br><span class="line"><span class="comment"># 4. 启动容器</span></span><br><span class="line">docker start id</span><br></pre></td></tr></table></figure><hr><h2 id="docker的生命周期"><a href="#docker的生命周期" class="headerlink" title="docker的生命周期"></a>docker的生命周期</h2><p>学习docker的核心要素</p><ul><li>诞生——使用——销毁</li><li>Dockerfile 通过docker build. 生成一个images，dockerfile是构建镜像的脚本。</li><li>通过docker push送到docker hub（公开仓库）上</li><li>通过docker pull拉到机器本地</li><li>docker save导出镜像</li><li>docker load导入镜像（传递镜像）</li><li>docker run镜像</li><li>docker stop、docker start、docker restart 容器id</li><li>docker commit 容器id，生成一个安装了软件的镜像</li></ul><p><img src="\blog\DockerLearning\DockerLifeCycle.png" alt="Docker Life Cycle" style="zoom:50%;" /></p><hr><h2 id="docker-镜像的原理"><a href="#docker-镜像的原理" class="headerlink" title="docker 镜像的原理"></a>docker 镜像的原理</h2><p>获取redis镜像时，下载了多行信息，最终得到了完整的镜像文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@jueye docker]<span class="comment"># docker pull redis</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">a2abf6c4d29d: Already exists</span><br><span class="line">c7a4e4382001: Pull complete</span><br><span class="line">4044b9ba67c9: Pull complete</span><br><span class="line">c8388a79482f: Pull complete</span><br><span class="line">413c8bb60be2: Pull complete</span><br><span class="line">1abfd3011519: Pull complete</span><br><span class="line">Digest: sha256:db485f2e245b5b3329fdc7eff4eb00f913e09d8feb9ca720788059fdc2ed8339</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:latestdocker.io/library/redis:latest</span><br></pre></td></tr></table></figure><p>一直以来使用的vmware虚拟机，安装的系统是一个完整的系统文件</p><ul><li>linux内核，作用是提供操作系统基本功能，与硬件交互</li><li>centos7发行版，作用是提供软件功能，例如yum安装包管理</li></ul><p>linux内核+centos发行版，组成了一个系统</p><p>docker绕过发行版使用系统，技术手段就是docker images</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jueye docker]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.8.2003 (Core)</span><br><span class="line">[root@jueye docker]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1127.el7.x86_64</span><br></pre></td></tr></table></figure><p>使用docker切换不同的发行版，内核使用的都是宿主机的内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用docker获取不同的发行版镜像</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker pull centos:7.5.1804</span></span><br><span class="line"></span><br><span class="line">[root@jueye docker]<span class="comment"># docker pull ubuntu</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认当前宿主机的发行版</span></span><br><span class="line">[root@jueye docker]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.8.2003 (Core)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器且进入容器内</span></span><br><span class="line"><span class="comment"># 参数解释 -i 交互式命令操作 -t 开启一个终端 bash 进入容器后执行的命令</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG        IMAGE ID       CREATED       SIZE</span><br><span class="line">nginx        latest     605c77e624dd   2 years ago   141MB</span><br><span class="line">redis        latest     7614ae9453d1   2 years ago   113MB</span><br><span class="line">ubuntu       latest     ba6acccedd29   2 years ago   72.8MB</span><br><span class="line">centos       7.5.1804   cf49811e3cdb   5 years ago   200MB</span><br><span class="line">[root@jueye docker]<span class="comment"># docker run -it cf49811e3cdb bash</span></span><br><span class="line">[root@f9148c20e12c /]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器内的发行版本</span></span><br><span class="line">[root@f9148c20e12c home]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.5.1804 (Core)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行ubuntu系统</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker run -it ubuntu bash</span></span><br><span class="line">root@5221c6ac5f55:/<span class="comment"># cat /etc/lsb-release</span></span><br><span class="line">DISTRIB_ID=Ubuntu</span><br><span class="line">DISTRIB_RELEASE=20.04</span><br><span class="line">DISTRIB_CODENAME=focal</span><br><span class="line">DISTRIB_DESCRIPTION=<span class="string">&quot;Ubuntu 20.04.3 LTS&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行SUSE</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker run -it opensuse bash</span></span><br><span class="line">ce16015d4dd6:/ <span class="comment"># cat /etc/SuSE-release</span></span><br><span class="line">openSUSE 42.3 (x86_64)</span><br><span class="line">VERSION = 42.3</span><br><span class="line">CODENAME = Malachite</span><br><span class="line"><span class="comment"># /etc/SuSE-release is deprecated and will be removed in the future, use /etc/os-release instead</span></span><br></pre></td></tr></table></figure><ul><li>一个完整的系统是由一个linux内核加发行版组成了一个可以使用的完整的系统</li><li>利用docker容器可以方便获取不同的发行版镜像，然后基于该镜像，运行各种容器使用</li></ul><hr><h2 id="理解什么是docker镜像"><a href="#理解什么是docker镜像" class="headerlink" title="理解什么是docker镜像"></a>理解什么是docker镜像</h2><p><strong>docker images搜索地址</strong>    <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><ol><li>docker解决了环境的兼容问题，在容器中运行linux发行版，以及各种软件</li><li>环境干净，安装的所有内容都在容器里，不想要了直接删除容器，不影响宿主机</li><li>比如想把mysql容器内的数据，配置，全部迁移到服务器上，只需要提交该容器，生成镜像，再把镜像放到服务器上，docker run就能运行</li><li>一个 完整的docker镜像可以创建出docker容器并运行，我们获取的是发行版，镜像文件不包含内核。</li></ol><p><img src="\blog\DockerLearning\ImageSystem.png" alt="Image System"></p><p><img src="\blog\DockerLearning\AddImage.png" alt="Add Image"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到正在运行的容器内</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker exec -it 50a7346bec6b bash</span></span><br><span class="line"><span class="comment"># 查看软件基础镜像的发行版本</span></span><br><span class="line">root@50a7346bec6b:/<span class="comment"># cat /etc/os-release</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;Debian GNU/Linux 11 (bullseye)&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;Debian GNU/Linux&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;11&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;11 (bullseye)&quot;</span></span><br><span class="line">VERSION_CODENAME=bullseye</span><br><span class="line">ID=debian</span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.debian.org/&quot;</span></span><br><span class="line">SUPPORT_URL=<span class="string">&quot;https://www.debian.org/support&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.debian.org/&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="docker-为什么分层镜像"><a href="#docker-为什么分层镜像" class="headerlink" title="docker 为什么分层镜像"></a>docker 为什么分层镜像</h2><ul><li>镜像分层资源共享，多个镜像来自同一个base镜像，docker host只需要存储一个base镜像</li><li>内存只需要加载一份host，即可为多个容器服务</li><li>修改只限制在单个容器内，其他容器不受影响</li></ul><p><img src="\blog\DockerLearning\WritableLayer.png" alt="Writable Layer" style="zoom:50%;" /></p><p>顶层为可写的容器层</p><p>下面是只读的镜像层</p><p><img src="\blog\DockerLearning\CopyOnWrite.jpg" alt="Copy-on-Write" style="zoom:70%;" /></p><hr><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名:tag tag就是具体的标签版本</span><br><span class="line"></span><br><span class="line">docker search centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地镜像文件有哪些</span></span><br><span class="line">docker images</span><br><span class="line">docker image ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载docker镜像</span></span><br><span class="line">docker pull centos <span class="comment"># 默认下载centos:latest</span></span><br><span class="line">docker pull centos:7.8.2003</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker镜像的存储路径</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker info</span></span><br><span class="line"></span><br><span class="line">[root@jueye docker]<span class="comment"># docker info | grep Root</span></span><br><span class="line">Docker Root Dir: /var/lib/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放docker镜像的目录</span></span><br><span class="line"><span class="comment"># json文件，该文件作用是记录镜像和容器的配置关系</span></span><br><span class="line">[root@jueye docker]<span class="comment"># ls /var/lib/docker/image/overlay2/imagedb/content/sha256/ -l</span></span><br><span class="line">总用量 28</span><br><span class="line">-rw------- 1 root root 7656 3月  26 17:03 605c77e624ddb75e6110f997c58876baa13f8754486b461117934b24a9dc3a85</span><br><span class="line">-rw------- 1 root root 7700 3月  27 10:02 7614ae9453d1d87e740a2056257a6de7135c84037c367e1fffa92ae922784631</span><br><span class="line">-rw------- 1 root root 1462 3月  27 14:21 ba6acccedd2923aee4c2acc6a23780b14ed4b8a5fa4e14e252a23b846df9b6c1</span><br><span class="line">-rw------- 1 root root 2205 3月  27 14:25 cf49811e3cdb94cbdfd645f3888d7add06a315449cf2c7ca7b81c312f1e46c63</span><br><span class="line">-rw------- 1 root root 1866 3月  27 14:57 d9e50bf288963ff3a78d1decfcd1deda5acd15a0e3094c9e4b317cf8299bd465</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用不同的镜像生成容器</span></span><br><span class="line"><span class="comment"># -it 开启一个交互式的终端，--rm 容器退出时删除容器</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker run -it --rm centos bash</span></span><br><span class="line">[root@cce87e7d1088 /]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 8.4.2105</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找某个类型docker images</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker images centos</span></span><br><span class="line">REPOSITORY   TAG        IMAGE ID       CREATED       SIZE</span><br><span class="line">centos       latest     5d0da3dc9764   2 years ago   231MB</span><br><span class="line">centos       7.8.2003   afb6fca791e0   3 years ago   203MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只列出镜像的id</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker images -q</span></span><br><span class="line">605c77e624dd</span><br><span class="line">7614ae9453d1</span><br><span class="line">ba6acccedd29</span><br><span class="line">5d0da3dc9764</span><br><span class="line">afb6fca791e0</span><br><span class="line">d9e50bf28896</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化显示镜像</span></span><br><span class="line"><span class="comment"># docker模板语言</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker images --format &quot;&#123;&#123;.ID&#125;&#125;--&#123;&#123;.Repository&#125;&#125;&quot;</span></span><br><span class="line">605c77e624dd--nginx</span><br><span class="line">7614ae9453d1--redis</span><br><span class="line">ba6acccedd29--ubuntu</span><br><span class="line">5d0da3dc9764--centos</span><br><span class="line">afb6fca791e0--centos</span><br><span class="line">d9e50bf28896--opensuse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以表格形式表示，美化</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker images --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;&quot;</span></span><br><span class="line">IMAGE ID       REPOSITORY   TAG</span><br><span class="line">605c77e624dd   nginx        latest</span><br><span class="line">7614ae9453d1   redis        latest</span><br><span class="line">ba6acccedd29   ubuntu       latest</span><br><span class="line">5d0da3dc9764   centos       latest</span><br><span class="line">afb6fca791e0   centos       7.8.2003</span><br><span class="line">d9e50bf28896   opensuse     latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找镜像</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker search centos</span></span><br></pre></td></tr></table></figure><hr><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker pull hello-world</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker rmi hello-world:latest</span></span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:2498fce14358aa50ead0cc6c19990fc6ff866ce72aeb5546e1d59caac3d0d60f</span><br><span class="line">Deleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412</span><br><span class="line">Deleted: sha256:e07ee1baac5fae6a26f30cabfe54a36d3402f96afda318fe0a96cec4ca393359</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以只输入首三位字母</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker rmi feb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量删除镜像（反引号，慎用）</span></span><br><span class="line"><span class="comment"># -a 列出所有容器包括停止运行的，-q列出容器数字ID而不是全部信息</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker rmi `docker images -aq`</span></span><br><span class="line"><span class="comment"># 批量删除容器</span></span><br><span class="line">docker rm `docker ps -aq`</span><br></pre></td></tr></table></figure><hr><h2 id="管理镜像"><a href="#管理镜像" class="headerlink" title="管理镜像"></a>管理镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交镜像</span></span><br><span class="line">docker commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出镜像的命令</span></span><br><span class="line">docker image save centos:7.8.2003 &gt; /opt/centos7.8.2003.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入镜像的命令</span></span><br><span class="line">docker image load -i /opt/centos7.8.2003.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker信息</span></span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像的详细信息，jason</span></span><br><span class="line">docker image inspect 镜像id</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker run 等于创建+启动</span></span><br><span class="line"><span class="comment"># docker run 镜像名，如果镜像不在本地，则会在线下载该镜像</span></span><br><span class="line"><span class="comment"># 注意：容器内的进程必须处于前台运行状态，否则容器就会直接退出</span></span><br><span class="line"><span class="comment"># 如果容器内什么也没做，也会挂掉，容器内必须有一个容器前台运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器且进入容器内，并在容器内执行某个命令</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker run -it ubuntu bash</span></span><br><span class="line">root@58bff6aab067:/<span class="comment"># cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">&quot;Ubuntu&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;20.04.3 LTS (Focal Fossa)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启一个容器，并让他运行某个程序</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker run centos ping baidu.com</span></span><br><span class="line">PING baidu.com (39.156.66.10) 56(84) bytes of data.</span><br><span class="line">64 bytes from 39.156.66.10 (39.156.66.10): icmp_seq=1 ttl=127 time=27.9 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># -d参数，可以让容器在后台运行</span></span><br><span class="line"><span class="comment"># --rm参数，容器挂掉后自动删除</span></span><br><span class="line"><span class="comment"># --name参数，给容器起名</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker run -d --rm --name test centos:7.8.2003 ping baidu.com</span></span><br><span class="line">b6d1bf78c5d3bd296e878bb92ecae3297a2dbf50fd3d1e70ae581d14fa283a97</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器日志</span></span><br><span class="line"><span class="comment"># -f更新日志</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker logs 7d8 | tail -5</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker logs -f 7d8 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入正在运行的容器内</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker exec -it 7d8 bash</span></span><br><span class="line">[root@7d89cce28ce5 /]<span class="comment"># ps -ef</span></span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 03:04 ?        00:00:00 ping baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的详细信息</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker container inspect 7d8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器端口映射</span></span><br><span class="line"><span class="comment"># 后台运行nginx容器，起个名字，端口映射宿主机的85端口，访问到容器内的80端口</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker run -d --name test_nginx -p 85:80 nginx</span></span><br><span class="line">3aeafcac21330851109ff5675439558446059e8e1df4069fc6218c75b4666660</span><br><span class="line"><span class="comment"># 随机端口映射</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker run -d --name test_nginx_random -P nginx</span></span><br></pre></td></tr></table></figure><hr><h2 id="提交容器"><a href="#提交容器" class="headerlink" title="提交容器"></a>提交容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jueye docker]<span class="comment"># docker commit 容器id 新的镜像名</span></span><br><span class="line">[root@jueye docker]<span class="comment"># docker commit c68b3ca32fe5 jueye/centos-vim-7.8.2003</span></span><br><span class="line">sha256:e240a15cbd4862dd3ad7294cdfe035dc3c93a75e8f59d61ac5b11f75d3dcd5d2</span><br></pre></td></tr></table></figure><p>镜像是多层存储，每一层在前一层的基础上进行修改；</p><p>容器也是多层存储，以镜像为基础层，在其基础上加一层作为容器运行时的存储层</p><p>创建镜像的两个方法</p><ul><li>手动修改容器内容，然后docker commit提交容器为新的镜像</li><li>通过dockerfile中定义一系列命令和参数构成的脚本，然后这些命令应用于基础镜像，依次添加层，最终生成一个新的镜像</li></ul><p>dockerfile主要组成部分</p><ol><li>基础镜像信息 FROM centos:6.8</li><li>制作镜像操作指令 RUN yum Install openssh-server -y</li><li>容器启动时执行指令 CMD [“/bin/bash”]</li></ol><hr><h1 id="dockerfile-学习"><a href="#dockerfile-学习" class="headerlink" title="dockerfile 学习"></a>dockerfile 学习</h1><blockquote><p>需求：</p><p>让你安装一个mysql，且启动</p><ol><li>开启虚拟机VMware</li><li>运行某个虚拟机，centos7</li><li>centos7安装mysql    yum install mysql-server</li><li>通过脚本，或者命令，启动mysql即可</li></ol><p>部署缓慢，且修改了宿主机的环境，删除较为麻烦，占用宿主机的一个端口</p></blockquote><p>基于容器运行mysql</p><ol><li>开始VMware</li><li>运行虚拟机centos7（宿主机）</li><li>安装docker容器软件</li><li>获取mysql镜像即可，docker pull mysql:tag<strong>获得的基础镜像是别人定制好的</strong></li><li>直接运行该镜像，通过端口映射，运行mysql，<code>docker run mysql:5.6</code> <strong>容器能够运行，必须在容器内有一个进程在前台运行，该容器内，有mysql在前台运行</strong></li><li>访问宿主机的一个映射端口，访问到容器内的mysql</li></ol><blockquote><p>想自定义镜像，就要自己写dockerfile</p></blockquote><hr><h2 id="dockerfile-指令"><a href="#dockerfile-指令" class="headerlink" title="dockerfile 指令"></a>dockerfile 指令</h2><p><code>FROM</code> 这个镜像的母体是谁？<strong>基础镜像</strong></p><p><code>MAINTAINER</code> 告诉别人，谁负责维护它？<strong>指定维护者信息，可以没有</strong></p><p><code>RUN</code> 你想让它干啥 <strong>在命令前面加上RUN</strong></p><p><code>ADD</code> 给它点创业资金 <strong>添加宿主机的文件到容器内，COPY文件，会自动解压</strong></p><p><code>COPY</code> 作用和 <code>ADD</code> 是一样的，都是拷贝宿主机的文件到容器内，但是 <code>ADD</code> 还能顺带解压</p><p><code>WORKDIR</code> 我是cd，换了个妆 <strong>设置当前工作目录</strong></p><p><code>VOLUME</code> 给它一个存放数据的地方 <strong>设置卷，挂载主机目录</strong></p><p><code>EXPOSE</code> 它要打开的门户是啥 <strong>指定对外的端口</strong></p><p><code>CMD</code> 运行 <strong>指定容器启动后要干的事</strong></p><hr><h1 id="dockerfile-实践"><a href="#dockerfile-实践" class="headerlink" title="dockerfile 实践"></a>dockerfile 实践</h1><blockquote><p>需求：通过dockerfile，构建nginx镜像，且运行容器后，生成的页面是 “HELLO WORLD!”</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建Dockerfile，注意文件名必须是这个</span></span><br><span class="line">[root@jueye learn_docker]<span class="comment"># pwd</span></span><br><span class="line">/learn_docker</span><br><span class="line">[root@jueye learn_docker]<span class="comment"># cat Dockerfile </span></span><br><span class="line">FROM nginx</span><br><span class="line">[root@jueye learn_docker]<span class="comment"># cat Dockerfile </span></span><br><span class="line">FROM nginx</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;&lt;meta charset=utf-8&gt;HELLO WORLD!&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br><span class="line"><span class="comment"># 2. 构建dockerfile</span></span><br><span class="line">[root@jueye learn_docker]<span class="comment"># docker build .</span></span><br><span class="line">[root@jueye learn_docker]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG        IMAGE ID       CREATED         SIZE</span><br><span class="line">&lt;none&gt;       &lt;none&gt;     2edb4024387b   4 minutes ago   141MB</span><br><span class="line">[root@jueye learn_docker]<span class="comment"># docker tag 2edb4024387b my_nginx</span></span><br><span class="line"><span class="comment"># 运行该镜像</span></span><br><span class="line">docker run -d -p 80:80 my-nginx</span><br></pre></td></tr></table></figure><hr><h2 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># COPY指令从宿主机复制文件/目录到新的一层镜像内，如</span></span><br><span class="line">copy hello-world.py /home/</span><br><span class="line"><span class="comment"># 支持多个文件，以及通配符形式复制，语法要满足Golang的filepath.Match</span></span><br><span class="line">copy hello* /tmp/cc?.txt. /home/</span><br><span class="line"><span class="comment"># COPY指令能够保留源文件的元数据，如权限，访问时间等，这点很重要</span></span><br></pre></td></tr></table></figure><hr><h2 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h2><p>特性和COPY基本一致，不过多了些功能</p><ol><li>源文件是一个URL，此时docker引擎会下载该链接，放入目标路径，且权限自动设为600</li><li>源文件是一个URL，且是一个压缩包，不会自动解压，也得单独用RUN指令解压</li><li>源文件是一个压缩文件，且是gzip，bzip2，xz，tar情况，ADD指令会自动解压缩该文件到目标路径</li></ol><hr><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMD 用法，注意双引号</span></span><br><span class="line">CMD [<span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>]</span><br><span class="line"><span class="comment"># 在指定entrypoint指令后，用CMD指定具体的参数</span></span><br><span class="line"><span class="comment"># docker不是虚拟机，容器就是一个进程，在程序启动的时候需要指定些运行参数</span></span><br><span class="line"><span class="comment"># centos镜像默认的CMD是/bin/bash，直接docker run -it centos会进入bash解释器。</span></span><br><span class="line"><span class="comment"># 也可以启动容器的时候，指定参数。docker run -it centos cat /etc/os-release</span></span><br><span class="line"><span class="comment"># CMD运行shell命令，也会被转化为shell形式</span></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 会被转化为</span></span><br><span class="line">CMD [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo <span class="variable">$PATH</span>&quot;</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="容器内运行程序"><a href="#容器内运行程序" class="headerlink" title="容器内运行程序"></a>容器内运行程序</h2><div class="note info modern"><p><strong>docker不是虚拟机的概念，虚拟机里的程序运行，基本都是在后台，利用systemctl运行，但容器内没有后台进程的概念，必须在前台运行。容器就是为了主进程而存在的，主进程如何退出了，容器就失去了意义，自动退出</strong></p></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CMD systemctl start nginx</span><br><span class="line"><span class="comment"># 这样写是错的，容器会立即退出</span></span><br><span class="line"><span class="comment"># 因为systemctl start nginx是希望以守护进程形式启动nginx，CMD命令会转化为</span></span><br><span class="line">CMD [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;systemctl start nginx&quot;</span>]</span><br><span class="line"><span class="comment"># 这样的命令主进程是sh解释器，执行完毕后立即结束，容器退出</span></span><br><span class="line"><span class="comment"># 正确的做法应该是</span></span><br><span class="line">CMD [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span><br></pre></td></tr></table></figure><p>把宿主机安装，启动nginx的理念放入到dockerfile</p><ol><li><code>RUN yum install nginx</code></li><li><code>RUN</code> 配置文件修改 <code>sed</code></li><li><code>RUN systemctl start nginx</code>  &#x274c; 容器内的程序必须是前台运行，否则启动不了</li><li>正确的应该是<code>CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code></li></ol><hr><h2 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h2><p>作用和 <code>CMD</code> 一样，都是在指定容器启动程序以及参数</p><p>当制定了 <code>ENTRYPOINT</code> 之后，<code>CMD</code> 指令的语义就有了变化</p><p>把 <code>CMD</code> 的内容当作参数传递给 <code>ENTRYPOINT</code> 指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 准备一个dockerfile</span></span><br><span class="line">FROM centos:7.8.2003</span><br><span class="line">RUN rpm --rebuilddb &amp;&amp; yum install epel-release -y</span><br><span class="line">RUN rpm --rebuilddb &amp;&amp; yum install curl -y</span><br><span class="line">CMD [<span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;http://ipinfo.io/ip&quot;</span>]</span><br><span class="line"><span class="comment"># 2. 构建镜像</span></span><br><span class="line">docker build .</span><br><span class="line"><span class="comment"># 3. 查看结果</span></span><br><span class="line">docker tag 9d6fecfd8b8c centos_curl</span><br><span class="line"><span class="comment"># 5. 运行镜像，生成容器</span></span><br><span class="line">[root@jueye learn_docker]<span class="comment"># docker  run centos_curl</span></span><br><span class="line">117.147.106.3[root@jueye learn_docker]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="comment"># 6. 修改dockerfile，将CMD替换为ENTRYPOINT</span></span><br><span class="line"><span class="comment"># 传递CMD指令当作了ENTRYPOINT参数，容器内执行的指令能附加上docker run后面的参数</span></span><br><span class="line">[root@jueye learn_docker]<span class="comment"># docker run centos_curl_new -I</span></span><br></pre></td></tr></table></figure><hr><h2 id="ARG-和-ENV-指令"><a href="#ARG-和-ENV-指令" class="headerlink" title="ARG 和 ENV 指令"></a>ARG 和 ENV 指令</h2><p>设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dockerfile 脚本，shell 脚本</span></span><br><span class="line">ENV NAME=<span class="string">&quot;JUEYE&quot;</span></span><br><span class="line">ENV AGE=<span class="string">&#x27;18&#x27;</span></span><br><span class="line">ENV MYSQL_VERSION=5.6</span><br><span class="line"><span class="comment"># 后续所有操作，通过$NAME就可以直接获取变量值</span></span><br><span class="line"><span class="comment"># ARG和ENV一样设置环境变量，区别在于ENV无论在构建镜像还是容器运行时都能用</span></span><br><span class="line"><span class="comment"># ARG只是用于构建镜像需要设置的变量，容器运行时就消失了 </span></span><br></pre></td></tr></table></figure><hr><h2 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h2><p>容器在运行时，应该保证在存储层不写入任何数据，运行在容器内产生的数据，推荐挂载写入到宿主机上进行维护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">VOLUME /data <span class="comment"># 将容器内的/data文件夹，在容器运行时，该目录自动挂在为匿名卷，任何向该目录写入数据的操作都不会被容器记录，保证容器存储层无状态理念</span></span><br><span class="line"><span class="comment"># Dockerfile1</span></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER Jueye</span><br><span class="line">VOLUME [<span class="string">&quot;/data1&quot;</span>, <span class="string">&quot;/data2&quot;</span>]</span><br><span class="line"><span class="comment"># 该容器运行时，这两个目录自动和宿主机的目录做好映射关系</span></span><br><span class="line">docker build .</span><br><span class="line">docker run f2aa80379f53</span><br><span class="line"><span class="comment"># 查看生成的容器信息，Mount信息为宿主机挂载点</span></span><br><span class="line">docker inspect</span><br></pre></td></tr></table></figure><ol><li>容器数据挂载的方式，通过dockerfile，指定VOLUME目录</li><li>通过 <code>docker run -v</code> 参数，直接设置需要映射挂载的目录</li></ol><hr><h2 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h2><p>指定容器运行时对外提供的端口服务</p><ul><li><p>帮助使用该镜像的人，快速理解该容器的一个端口业务</p></li><li><pre><code class="lang-bash">docker port # 容器docker run -p # 宿主机端口：容器端口docker run -P # 作用是随即宿主机端口：容器内端口</code></pre></li></ul><h2 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h2><p>用于在dockerfile中, 目录切换更改工作目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /opt</span><br></pre></td></tr></table></figure><hr><h2 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h2><p>用于改变环境, 用于切换用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER root</span><br><span class="line">USER Jueye</span><br></pre></td></tr></table></figure><hr><h2 id="构建一个网站镜像"><a href="#构建一个网站镜像" class="headerlink" title="构建一个网站镜像"></a>构建一个网站镜像</h2><ol><li>nginx, 修改首页内容的html网站就跑起来了,  web  server, 提供web服务, 提供代理转发, 提供网关,  限流等.. apache</li><li>web framework, web框架, 一般由开发通过某个开发语言基于某个web框架, 自己去开发一个web站点, python, django框架</li></ol><blockquote><ol><li><p>用python语言，基于flask web框架，开发一个自己的网站，写了一个后端的网站代码</p></li><li><p>开发dockerfile，部署该代码，生成镜像</p></li><li>其他人基于该镜像，docker run就可以在电脑跑起来你的网站</li></ol></blockquote><p>比如安装一个etcd，nacos，都是比较复复杂的软件</p><p>需要依赖go语言环境，java语言环境，在自己的机器安装好对应的开发环境，以及对应的版本和依赖。</p><p>tomcat，jdk环境</p><p>当你有了docker</p><p>docker pull tomcat # 这些主流的镜像都可以找到，并且该镜像中就已经打包好了java环境</p><p>docker pull nacos # 打包好了各种依赖环境</p><p>docker run tomcat xxxx # 可以直接访问tomcat了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 在宿主机上准备一个目录 ，准备好dockerfile，你的代码 </span></span><br><span class="line"><span class="comment"># 写一个flask的python代码</span></span><br><span class="line"><span class="comment"># 创建代码文件</span></span><br><span class="line">[root@jueye learn_docker]<span class="comment"># cat Jueye_flask.py </span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">from flask import Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">@app.route(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">def hello():</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;hello docker, I&#x27;m Jueye.&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=8080)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 编写dockerfile</span></span><br><span class="line">touch Dockerfile</span><br><span class="line">vim Dockerfile</span><br><span class="line">FROM centos:7.8.2003</span><br><span class="line">RUN curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo;</span><br><span class="line">RUN curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo;</span><br><span class="line">RUN yum makecache fast;</span><br><span class="line">RUN yum install python3-devel python3-pip -y</span><br><span class="line">RUN pip3 install flask</span><br><span class="line">COPY Jueye._flask.py /opt</span><br><span class="line">WORKDIR /opt</span><br><span class="line">EXPOSE 8080</span><br><span class="line">CMD [<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;Jueye_flask.py&quot;</span>]</span><br><span class="line"><span class="comment"># 4. 构建镜像</span></span><br><span class="line">docker build -t <span class="string">&#x27;jueye/my_flask_web&#x27;</span> .</span><br><span class="line"><span class="comment"># 5. 运行镜像生成容器</span></span><br><span class="line">docker run -d --name myflask_web1 -p 90:8080 jueye/my_flask_web</span><br><span class="line"><span class="comment"># 6. 访问宿主机，看容器内的flask网站</span></span><br><span class="line">http://192.168.72.128:90/</span><br><span class="line"><span class="comment"># 7. 该如何修改网站内容，这个程序跑在容器里了 </span></span><br></pre></td></tr></table></figure><hr><h1 id="如何修改该网站的内容"><a href="#如何修改该网站的内容" class="headerlink" title="如何修改该网站的内容"></a>如何修改该网站的内容</h1><ol><li>修改宿主机的代码以及dockerfile，重新构建</li><li>可以进入到已经运行的容器内修改代码，重启容器即可</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it id bash</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">vi Jueye_flask.py</span><br><span class="line"><span class="comment"># 退出容器，重启容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">docker restart id</span><br></pre></td></tr></table></figure><hr><h2 id="docker-容器管理总结"><a href="#docker-容器管理总结" class="headerlink" title="docker 容器管理总结"></a>docker 容器管理总结</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行镜像，进入容器内</span></span><br><span class="line">docker run --name my_nginx -d --restart=always -p 7070:80 nginx</span><br><span class="line"><span class="comment"># --restart=always 检查容器是否还存活，如果死了就重启</span></span><br></pre></td></tr></table></figure><hr><h2 id="docker-run-启动容器的时候，docker-后台操作流程"><a href="#docker-run-启动容器的时候，docker-后台操作流程" class="headerlink" title="docker run 启动容器的时候，docker 后台操作流程"></a>docker run 启动容器的时候，docker 后台操作流程</h2><ul><li>检查本地是否有该镜像，没有就下载</li><li>利用镜像创建且启动一个容器</li><li>分配容器文件系统，在只读的镜像层挂载读写层</li><li>宿主机的网桥接口会分配一个虚拟接口到容器中</li><li>容器获得地址池里的ip地址</li><li>执行用户指定的程序</li><li>若程序里没有进程在运行，容器执行完毕后立即终止</li></ul><p><code>docker start</code> 可以启动一个处于 <code>stop</code> 状态的容器</p><p><code>docker logs -f</code> 查看容器内是否写入日志，<code>-f</code> 表示刷新日志</p><p><code>docker ps</code> 查看在运行的容器，等同于 <code>docker container ls</code> </p><p><code>docker ps -a</code> 查看挂掉以及活着的容器</p><p><code>docker start id</code> 启动容器</p><p><code>docker stop id</code> 停止容器 </p><p><code>docker exec -it id bash</code> 进入容器内</p><p><code>docker rm id</code> 删除容器</p><p><code>docker rm `docker ps -aq` </code>删除所有容器</p><p><code>docker rm -f id</code>  强制杀死容器</p><p><code>docker top</code> 查看容器内进程信息，PID</p><p><code>docker stats id</code> 查看容器内资源信息，CPU</p><p><code>docker inspect id</code> 查看容器的具体信息</p><p><code>docker inspect --format &#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; id</code> 拿到容器IP</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将 Git Page 网站域名更换为定制域名</title>
      <link href="blog/DomainName/"/>
      <url>blog/DomainName/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="定制域名"><a href="#定制域名" class="headerlink" title="定制域名"></a>定制域名</h2><p>首先要购买一个域名用于DNS解析，我这里是在<a href="https://wanwang.aliyun.com/">阿里云</a>上购买的域名。</p><div class="note warning modern"><p>输入自己心仪的域名和后缀，查询该域名是否被注册。</p></div><p><img src="\blog\DomainName\CheckDomainName.png" alt="Check Domain Name" style="zoom:80%;" /></p><p>购买好域名后，进入阿里云控制台，点击左上角下拉菜单，选择云解析 DNS —&gt; 域名解析。</p><p><img src="\blog\DomainName\DNSAnalysis.png" alt="DNS Analysis" style="zoom:80%;" /></p><p>如下所示设置三个记录。</p><p><img src="\blog\DomainName\Settings.png" alt="DNS Settings" style="zoom:80%;" /></p><p>回到 Git Page 设置页面。</p><p><img src="\blog\DomainName\CustomDomain.png" alt="Custom Domain" style="zoom:80%;" /></p><div class="note success modern"><p>DNS 解析成功，可以通过定制域名访问播客主页！</p></div><div class="note warning modern"><p>注意在<code>\source</code>下的CNAME文件里写入域名，否则每次线上部署都需要重新设置域名！</p></div>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改 Hexo + Butterfly 主题博客字体</title>
      <link href="blog/WebFont/"/>
      <url>blog/WebFont/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="改变博客字体"><a href="#改变博客字体" class="headerlink" title="改变博客字体"></a>改变博客字体</h1><hr><h2 id="新建自定义css"><a href="#新建自定义css" class="headerlink" title="新建自定义css"></a>新建自定义css</h2><p>在<code>theme\butterfly\source\css</code>中新建一个<code>font.css</code>，在里面写上如下代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;jinkaiFont&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(../fonts/jinkai.ttf) <span class="built_in">format</span>(<span class="string">&quot;truetype&quot;</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*指针样式*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*链接小手样式*/</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到<code>source</code>目录下，创建<code>font</code>文件夹，将你想要设置的字体保存在这里。</p><div class="note warning modern"><p>注意，这里我用的<code>jinkai.tff</code>字体，所以<code>font.css</code>里的url是<code>../fonts/jinkai.ttf</code>。如果你用的是别的字体或者在另一个目录创建字体文件夹，需要确认这里的路径是否正确！</p></div><div class="note info modern"><p>这里我还设置了鼠标指针的样式。如果不喜欢这样的指针，参考更改字体的办法同样可以进行更换。</p></div><hr><h2 id="修改-yml-配置"><a href="#修改-yml-配置" class="headerlink" title="修改 yml 配置"></a>修改 yml 配置</h2><p>打开根目录的<code>_config.butterfly.yml</code>，定位到<code>inject</code>栏。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/font.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br></pre></td></tr></table></figure><p>将这里的链接改为<code>font.css</code>的路径，更新本地部署查看结果。</p><p>如果字体未能成功加载，<code>F12</code>打开浏览器的DevTools，选择网络选项卡，刷新本地网页。</p><p><img src="\blog\WebFont\FontCSS.png" alt="Font CSS" style="zoom:80%;" /></p><p><img src="\blog\WebFont\jinkaiFont.png" alt="Jinkai Font" style="zoom:80%;" /></p><div class="note success modern"><p>从图中成功定位到字体样式的路径和字体文件路径，如果加载错误大概率是路径写错了。</p></div>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加 Gitalk 评论区</title>
      <link href="blog/AddComment/"/>
      <url>blog/AddComment/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="添加-Gitalk-评论功能"><a href="#添加-Gitalk-评论功能" class="headerlink" title="添加 Gitalk 评论功能"></a>添加 Gitalk 评论功能</h1><hr><h2 id="获取-Gitalk的id和secret"><a href="#获取-Gitalk的id和secret" class="headerlink" title="获取 Gitalk的id和secret"></a>获取 Gitalk的<code>id</code>和<code>secret</code></h2><p>在 Github 仓库主页点击右上角头像，选择<code>setting</code> —&gt; <code>Developer settings</code>—&gt; <code>OAuth Apps</code>，然后点击<code>Register a new application</code>选项卡，新建一个授权APP设置项。</p><div class="note warning modern"><p>注意这里如果没有域名，就跟你主页保持一致。</p></div><p><img src="\blog\AddComment\OAuthApp.png" alt="OAuth App" style="zoom:80%;" /></p><div class="note success modern"><p>获取<code>Client ID</code>和<code>Client secrets</code>（这里我把自己的信息打码了）</p></div><p><img src="\blog\AddComment\ID&Secrets.png" alt="ID & Secrets" style="zoom:70%;" /></p><hr><h2 id="修改-config-butterfly-yml配置"><a href="#修改-config-butterfly-yml配置" class="headerlink" title="修改_config.butterfly.yml配置"></a>修改<code>_config.butterfly.yml</code>配置</h2><h3 id="修改comments和gitalk栏目"><a href="#修改comments和gitalk栏目" class="headerlink" title="修改comments和gitalk栏目"></a>修改<code>comments</code>和<code>gitalk</code>栏目</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># 在use下设置使用的评论系统，不设置则不启用。最多只能设置两个评论系统，第一个设为默认</span></span><br><span class="line">  <span class="attr">use:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">Gitalk</span> <span class="comment"># 注意G大写</span></span><br><span class="line">  <span class="comment"># - Valine</span></span><br><span class="line">  <span class="comment"># - Disqus</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># 在按钮旁边显示评论名称</span></span><br><span class="line">  <span class="comment"># lazyload: 当评论元素进入浏览器的视口时，评论系统将被加载。</span></span><br><span class="line">  <span class="comment"># 如果设置为true，则评论计数无效</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># 在帖子的 top_img 中显示评论数</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># 在主页中显示评论数</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># gitalk</span></span><br><span class="line"><span class="comment"># https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">Your</span> <span class="string">Client</span> <span class="string">ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">Your</span> <span class="string">Client</span> <span class="string">secret</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">loli-eternally.github.io</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">Loli-Eternally</span></span><br></pre></td></tr></table></figure><h3 id="重新线上部署"><a href="#重新线上部署" class="headerlink" title="重新线上部署"></a>重新线上部署</h3><div class="note success modern"><p>评论区部署和博客的线上部署步骤一样，已经整理成傻瓜式<a href="/blog/done/#上传博客">点击</a>就送啦！</p></div><hr><h2 id="查看部署并授权"><a href="#查看部署并授权" class="headerlink" title="查看部署并授权"></a>查看部署并授权</h2><div class="note warning modern"><p>第一次会显示未找到相关的 Issue 进行评论，需要用自己的仓库的 GitHub 账号登录并授权。</p></div><p><img src="\blog\AddComment\IssueNotfound.png" alt="Issue Not Found" style="zoom:60%;" /></p><p>授权好之后，会在 GitHub 主页的 Issue 栏目下看到新的 Issue 评论。</p><p><img src="\blog\AddComment\Issue.png" alt="Issue" style="zoom:80%;" /></p><div class="note success modern"><p>回到博客，发现 Gitalk 评论区已成功加载。</p></div><p><img src="\blog\AddComment\Comment.png" alt="Comment" style="zoom:60%;" /></p><div class="note warning modern"><p>注意，浏览器的 Grammarly 插件会导致评论输入每次只能打一个字母，输入评论前先禁用该插件。</p></div>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改 Gitalk 评论区字体样式</title>
      <link href="blog/CommentFont/"/>
      <url>blog/CommentFont/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定制博客-Gitalk-评论区的字体"><a href="#定制博客-Gitalk-评论区的字体" class="headerlink" title="定制博客 Gitalk 评论区的字体"></a>定制博客 Gitalk 评论区的字体</h1><hr><h2 id="重定向-gitalk-min-css"><a href="#重定向-gitalk-min-css" class="headerlink" title="重定向 gitalk.min.css"></a>重定向 gitalk.min.css</h2><div class="note info modern"><p>Gitalk 的样式可以在<code>_config.butterfly.yml</code>中的<code>comment</code>区找到。</p></div><p>Gitalk 的<code>css</code>文件默认定向为<code>https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css</code>，我们将其重定向为自己新建的<code>/css/gitalk.min.css</code>。</p><p><img src="\blog\CommentFont\FontRef.png" alt="Font Ref" style="zoom:80%;" /></p><hr><h2 id="新建-gitalk-min-css"><a href="#新建-gitalk-min-css" class="headerlink" title="新建 gitalk.min.css"></a>新建 gitalk.min.css</h2><div class="note info modern"><p>在<code>theme/butterfly/source/css</code>中新建一个<code>gitalk.min.css</code>文件，然后在本地部署的网页中打开<code>DevTools</code>工具(F12)，找到<code>gitalk.min.css</code>并将其中内容复制到前者中。</p></div><p><img src="\blog\CommentFont\DevTools.png" alt="Dev Tools" style="zoom:80%;" /></p><hr><h2 id="修改-font-family"><a href="#修改-font-family" class="headerlink" title="修改 font-family"></a>修改 font-family</h2><p>在复制好的<code>gitalk.min.css</code>中对<code>font-family</code>进行修改，这样评论区的样式就由重定向后的结果决定。</p><p><img src="\blog\CommentFont\FontChange.png" alt="Font Change" style="zoom:80%;" /></p><hr><h2 id="查看评论区结果"><a href="#查看评论区结果" class="headerlink" title="查看评论区结果"></a>查看评论区结果</h2><p>修改前：</p><p><img src="\blog\CommentFont\BeforeChange.png" alt="Before Change"></p><p>修改后：</p><p><img src="\blog\CommentFont\AfterChange.png" alt="After Change"></p><div class="note success modern"><p>评论区字体修正成功！</p></div>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加一篇 blog 文章</title>
      <link href="blog/WriteBlog/"/>
      <url>blog/WriteBlog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="小白如何添加自己的第一篇-blog"><a href="#小白如何添加自己的第一篇-blog" class="headerlink" title="小白如何添加自己的第一篇 blog"></a>小白如何添加自己的第一篇 blog</h1><hr><h2 id="页面生成"><a href="#页面生成" class="headerlink" title="页面生成"></a>页面生成</h2><p>点击<code>创建文章或页面.bat</code>文件，选择1。</p><p><img src="\blog\WriteBlog\BuildPage.png" width="60%"></p><p><img src="\blog\WriteBlog\BuildPage1.png" alt="Build Page" width="60%"></p><div class="note info modern"><p>可以看到<code>source\_posts</code>里多了一个文件夹和一个md文件，这里就是咱们需要修改的地方。</p></div><p><img src="\blog\WriteBlog\NewBlog.png" alt="New Blog" style="zoom:67%;" /></p><hr><h2 id="编辑页面"><a href="#编辑页面" class="headerlink" title="编辑页面"></a>编辑页面</h2><p>打开md文件， 这里需要用<code>markdown</code>语法写笔记。</p><div class="note success modern"><p>目前主流的<code>markdown</code>编辑器有很多，知乎上已经介绍地非常详细了<a href="https://zhuanlan.zhihu.com/p/69210764"><strong>Link</strong></a>，不过本人还是喜欢用<code>Typora</code>，简洁干净轻量，还有各式各样好看的主题可供选择。</p></div><blockquote><p>[!Note]</p><ul><li>This is my first blog!<ul><li>Hello World!</li><li>[x] Good Job!</li></ul></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jueye ~]<span class="comment"># echo Hello Typora!</span></span><br><span class="line">Hello Typora!</span><br></pre></td></tr></table></figure><p>以本节上方内容为例，<code>Typora</code>里输出的样式如下图所示。</p><p><img src="\blog\WriteBlog\DemoBlog.png" alt="Demo Blog" style="zoom:60%;" /></p><div class="note info modern"><p>针对<code>Markdown</code>语法，后面会出一期专栏进行详解，有兴趣的小伙伴可以多多关注萌雪哦！</p></div><hr><h2 id="页面部署"><a href="#页面部署" class="headerlink" title="页面部署"></a>页面部署</h2><div class="note success modern"><p>页面部署和博客的线上部署步骤一样，已经整理成傻瓜式<a href="/blog/done/#上传博客">点击</a>就送啦！</p></div><div class="note info modern"><p>值得注意的是，md文件内容与本地部署的测试页面是同步更新的，这意味着大家可以在本地边写Blog边刷新网页看成果，简直太欢愉了！</p></div>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 搭建个人博客随记</title>
      <link href="blog/done/"/>
      <url>blog/done/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo-Butterfly-搭建个人博客随记"><a href="#Hexo-Butterfly-搭建个人博客随记" class="headerlink" title="Hexo + Butterfly 搭建个人博客随记"></a>Hexo + Butterfly 搭建个人博客随记</h1><hr><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><div class="note warning modern"><p>首先得有一个GitHub账号</p></div><p><img src="\blog\done\SigninGithub.png" alt="Sign in GitHub" width="70%"> </p><div class="note info modern"><p>这里就不赘述如何注册一个GitHub账号了，如果大家能够科学上网想必能轻松完成。</p></div><p>打开你的repo，new一个名字叫<code>YourName.github.io</code>的repo。这里我演示的名字叫<code>BlogDemo</code>，大家也可以挑自己喜欢的。</p><p><img src="\blog\done\YourRepo.png" alt="Your Repo" style="zoom:80%;" /></p><p><img src="\blog\done\NewRepo.png" alt="New Repo" style="zoom:80%;" /></p><div class="note warning modern"><p>注意这里可以下载安装<code>GitHub Desktop</code>，便于不想学<code>git</code>指令的小伙伴管理仓库。此外，需要将<code>HTTPS</code>和<code>SSH</code>对应的网址<code>https://github.com/Loli-Eternally/BlogDemo.github.io.git</code>和地址<code>git@github.com:Loli-Eternally/BlogDemo.github.io.git</code>记录下来，便于后面修改配置进行博客的部署。</p></div><p><img src="\blog\done\BlogDemo.png" alt="Blog Demo"></p><p>下载安装好<code>GitHub Desktop</code>并启动后，clone<code>BlogDemo</code>，URL地址为上面提到的<code>https://github.com/Loli-Eternally/BlogDemo.github.io.git</code></p><p><img src="\blog\done\GD.png" alt="GitHub Desktop"></p><p><img src="\blog\done\GitClone.png" alt="Git Clone"></p><p>这个时候我们的repo是空的，需要在本地将<code>BlogDemo</code>进行部署。可以直接将我准备好的<a href="https://pan.baidu.com/s/18bdxJlWn1yhRBNv-Q51Rsg?pwd=32gs">Demo镜像</a>下载下来，解压到上面Git Clone图里的<code>Local path</code>下</p><p><img src="\blog\done\Unzip.png" alt="Unzip" style="zoom:80%;" /></p><p>现在需要安装<strong>hexo</strong>了，但是这个框架需要用到Nodejs，这个请大家自行安装。</p><div class="note warning modern"><p>大家安装Nodejs时注意添加环境变量，后面安装<strong>hexo</strong>需要调用<code>npm</code>。</p></div><p>打开Unzip图中最下方的<code>运行脚本.bat</code>，选择1用npm安装hexo（如果太慢可以尝试别的选项）。</p><p><img src="\blog\done\npminstall.png" alt="npm install"></p><p>这里我们可以看到多了个<code>node_modules</code>文件夹，点进去进入<code>.bin</code>目录，<code>ctrl+c</code>复制这个路径。</p><p><img src="\blog\done\NodeModule.png" alt="NodeModule"></p><p><img src="\blog\done\path.png" alt="Path"></p><div class="note info modern"><p>添加环境变量，在这个路径下可以直接从<code>cmd</code>启动<strong>hexo</strong>。</p></div><p><img src="\blog\done\Env.png" alt="Env Config"></p><p>再次打开<code>运行脚本.bat</code>，选择<code>2. 本地运行测试</code>（需要等一小会儿）</p><p><img src="\blog\done\LocalTest.png" alt="Local Test"></p><div class="note success modern"><p>本地测试部署成功</p></div><p><img src="\blog\done\Congrats.png" alt="Congratulations"></p><h2 id="线上部署"><a href="#线上部署" class="headerlink" title="线上部署"></a>线上部署</h2><p>点击<code>设置git用户名和生成密钥.bat</code>，输入的名字和邮箱后回车。是否覆盖选y，回车一直到底，成功生成ssh密钥。</p><p><img src="\blog\done\SSH.png" alt="SSH"></p><p><img src="\blog\done\SSHKey.png" alt="SSH Key"></p><p>打开<code>生成的ssh密钥.txt</code>，<code>ctrl+c</code>复制密钥。</p><p><img src="\blog\done\SSHKeyC.png" alt="SSH Key Copy"></p><p>回到GitHub仓库，点击<code>Setting</code>选项卡下的<code>Deploy keys</code>，添加一个key并将复制好的密钥粘贴进去。</p><p><img src="\blog\done\Setting.png" alt="Setting"></p><p>SSH key添加好后，打开<code>_config.yml</code>文件，修改<code>url</code>和<code>repo</code>，替换成你自己的https网址和git地址。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://github.com/Loli-Eternally/BlogDemo.github.io.git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment 部署</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:Loli-Eternally/BlogDemo.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">upload</span></span><br></pre></td></tr></table></figure><h3 id="上传博客"><a href="#上传博客" class="headerlink" title="上传博客"></a>上传博客</h3><p>关闭本地部署的blog网页和cmd，重新启动<code>运行脚本.bat</code>，选择<code>3. 上传网站</code>。</p><div class="note success modern"><p>回到repo主页，看到此时的repo已经都上传好了。</p></div><p><img src="\blog\done\DeployRepo.png" alt="Deploy Repo"></p><p>点击<code>Setting</code>选项卡下的<code>Pages</code>，在<code>Branch</code>一栏选择<code>master</code>并保存。</p><p><img src="\blog\done\Check.png" alt="Check Blog"></p><div class="note success modern"><p>等几分钟后，GitHub完成部署，就可以<code>Visit site</code>了。</p></div><p><img src="\blog\done\DeploySucceed.png" alt="Deploy Succeed"></p><h2 id="博客内容个性化定制"><a href="#博客内容个性化定制" class="headerlink" title="博客内容个性化定制"></a>博客内容个性化定制</h2><p>打开根目录下的<code>_config.yml</code>文件，配置网站基本信息。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Hexo官方文档: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment"># 网站的基本信息</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">雪萌阁</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">雪萌随记</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">这里是雪萌教总部哦！</span></span><br><span class="line"><span class="attr">keywords:</span> </span><br><span class="line"><span class="attr">author:</span> <span class="string">萌雪</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>主页背景，头像等图片存储在<code>source\media</code>路径下，打开配置文件<code>_config.butterfly.yml</code>可对路径进行更改。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图片设置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 网站图标</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/media/favicon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 头像</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/media/avatar.jpg</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用所有横幅图片</span></span><br><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#首页的横幅图片</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">/media/bg.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认横幅图片</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">/media/top.jpg</span></span><br></pre></td></tr></table></figure><div class="note info modern"><p>更多配置信息(图标，代码区，主菜单等)请仔细阅读<code>_config.butterfly.yml</code>文件。</p></div><h2 id="CDN-网站加速"><a href="#CDN-网站加速" class="headerlink" title="CDN 网站加速"></a>CDN 网站加速</h2><p>因为 GitHub Page 大陆访问非常缓慢，大家可以根据需求进行 CDN 网站加速，这里推荐使用 <a href="https://www.cloudflare.com/zh-cn/">Cloudflare</a> 免费加速。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
